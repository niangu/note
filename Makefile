嵌入式Linux驱动开发：
1、设置 TAB 键为 4 字节，2、VIM 编辑器显示行号
VI 编辑器默认 TAB 键为 8 空格,我们改成 4 空格,用 vi 打开文件/etc/vim/vimrc,在此文
件最后面输入如下代码:
set ts=4
set nu
set noexpandtab


gcc命令：
gcc [选项] [文件名字]
主要选项如下:
-c:只编译不链接为可执行文件,编译器将输入的.c 文件编译为.o 的目标文件。
-o:<输出文件名> 用来指定编译结束以后的输出文件名,如果使用这个选项的话 GCC 默
认编译出来的可执行文件名字为 a.out。
-g:添加调试信息,如果要使用调试工具(如 GDB)的话就必须加入此选项,此选项指示编
译的时候生成调试所需的符号信息。
-O:对程序进行优化编译,如果使用此选项的话整个源代码在编译、链接的的时候都会进
行优化,这样产生的可执行文件执行效率就高。
-O2:比-O 更幅度更大的优化,生成的可执行效率更高,但是整个编译过程会很慢。


Makefile 里面是由一系列的规则组成的,这些规则格式如下:
目标...... : 依赖文件集合......
命令 1
命令 2
......

#Makefile 变量的使用
2 objects = main.o input.o calcu.o
3 main: $(objects)
4
gcc -o main $(objects)

这就是赋值符“=”的神奇之处!借助另外一个变量,可以将变量的真实
值推到后面去定义。也就是变量的真实值取决于它所引用的变量的最后一次有效值。
这是因为赋值符“:=”
不会使用后面定义的变量,只能使用前面已经定义好的
“?=”是一个很有用的赋值符
curname ?= zuozhongkai
上述代码的意思就是,
如果变量 curname 前面没有被赋值,
那么此变量就是“zuozhongkai”
,
如果前面已经赋过值了,那么就使用前面赋的值。

4、变量追加“+=”
Makefile 中的变量是字符串,有时候我们需要给前面已经定义好的变量添加一些字符串进
去,此时就要使用到符号“+=”
,比如如下所示代码:
objects = main.o inpiut.o
objects += calcu.o

模式规则中,至少在规则的目标定定义中要包涵“%”,否则就是一般规则,目标中的“%”
表示对文件名的匹配,
“%”表示长度任意的非空字符串,比如“%.c”就是所有的以.c 结尾的
文件,类似与通配符,a.%.c 就表示以 a.开头,以.c 结束的所有文件。

Makefile 自动化变量:
自动化变量 描述
$@ 规则中的目标集合,在模式规则中,如果有多个目标的话,
“$@”表示匹配模
式中定义的目标集合。
$% 当目标是函数库的时候表示规则中的目标成员名,如果目标不是函数库文件,
那么其值为空。
$< 依赖文件集合中的第一个文件,如果依赖文件是以模式(即“%”)定义的,那么
“$<”就是符合模式的一系列的文件集合。
$? 所有比目标新的依赖目标集合,以空格分开。
$^ 所有依赖文件的集合,使用空格分开,如果在依赖文件中有多个重复的文件,
“$^”会去除重复的依赖文件,值保留一份。
$+ 和“$^”类似,但是当依赖文件存在重复的话不会去除重复的依赖文件。
$* 这个变量表示目标模式中"%"及其之前的部分,如果目标是 test/a.test.c,目标模
式为 a.%.c,那么“$*”就是 test/a.test。
表 3.4.4.1 自动化变量
表 3.4.4.1 中的 7 个自动化变量中,常用的三种:$@、$<和$^
objects = main.o input.o calcu.o
main: $(objects)
	gcc -o main $(objects)

%.o : %.c
	gcc -c $<

clean:
	rm *.o
	rm main

使用伪目标的主要是为了避免 Makefile 中定义的只执行命令的目标和工作目录下的实际文
件出现名字冲突
.PHONY : clean
<条件关键字>
<条件为真时执行的语句>
endif
以及:
<条件关键字>
<条件为真时执行的语句>
else
<条件为假时执行的语句>
endif

函数的用法如下:
$(函数名 参数集合)
或者
${函数名 参数集合}
函数 subst 用来完成字符串替换
函数 patsubst 用来完成模式字符串替换
函数 dir 用来获取目录
函数 notdir 看名字就是知道去除文件中的目录部分
foreach 函数用来完成循环,
$(wildcard *.c)
上面的代码是用来获取当前目录下所有的.c 文件,类似“%”
。

VSCode需要安装的插件：
1)、C/C++,这个肯定是必须的。
2)、C/C++ Snippets,即 C/C++重用代码块。
3)、C/C++ Advanced Lint,即 C/C++静态检测 。
4)、Code Runner,即代码运行。
5)、Include AutoComplete,即自动头文件包含。
6)、Rainbow Brackets,彩虹花括号,有助于阅读代码。
7)、One Dark Pro,VSCode 的主题。
8)、GBKtoUTF8,将 GBK 转换为 UTF8。
9)、ARM,即支持 ARM 汇编语法高亮显示。
10)、Chinese(Simplified),即中文环境。
11)、vscode-icons,VSCode 图标插件,主要是资源管理器下各个文件夹的图标。
12)、compareit,比较插件,可以用于比较两个文件的差异。
13)、DeviceTree,设备树语法插件。
14)、TabNine,一款 AI 自动补全插件,强烈推荐,谁用谁知道!


